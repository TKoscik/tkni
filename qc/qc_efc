#!/bin/bash -e
#===============================================================================
# <<DESCRIPTION>>
# Authors: <GIVENNAME> <FAMILYNAME>,
# Date: <date of initial commit>
# CHANGELOG: <description of major changes to functionality>
#===============================================================================
PROC_START=$(date +%Y-%m-%dT%H:%M:%S%z)
FCN_NAME=($(basename "$0"))
DATE_SUFFIX=$(date +%Y%m%dT%H%M%S%N)
OPERATOR=$(whoami)
OPERATOR=${OPERATOR//@}
KERNEL="$(uname -s)"
HARDWARE="$(uname -m)"
NO_LOG=false
umask 007

# actions on exit, write to logs, clean scratch --------------------------------
function egress {
  EXIT_CODE=$?
  PROC_STOP=$(date +%Y-%m-%dT%H:%M:%S%z)
  if [[ ${EXIT_CODE} -eq 0 ]]; then
    if [[ -n ${DIR_SCRATCH} ]]; then
      if [[ -d ${DIR_SCRATCH} ]]; then
        if [[ "$(ls -A ${DIR_SCRATCH})" ]]; then
          rm -R ${DIR_SCRATCH}
        else
          rmdir ${DIR_SCRATCH}
        fi
      fi
    fi
  fi
  if [[ "${NO_LOG}" == "false" ]]; then
    writeBenchmark ${OPERATOR} ${HARDWARE} ${KERNEL} ${FCN_NAME} \
      ${PROC_START} ${PROC_STOP} ${EXIT_CODE}
  fi
}
trap egress EXIT

# Parse inputs -----------------------------------------------------------------
OPTS=$(getopt -o hvl --long image:,framemask:,dir-scratch:,\
help,verbose,no-log -n 'parse-options' -- "$@")
if [ $? != 0 ]; then
  echo "Failed parsing options" >&2
  exit 1
fi
eval set -- "$OPTS"

# Set default values for function ---------------------------------------------
IMAGE=
MASK=
DIR_SCRATCH=${TKNI_SCRATCH}/${FCN_NAME}_${OPERATOR}_${DATE_SUFFIX}
HELP=false
VERBOSE=false

while true; do
  case "$1" in
    -h | --help) HELP=true ; shift ;;
    -v | --verbose) VERBOSE=1 ; shift ;;
    -l | --no-log) NO_LOG=true ; shift ;;
    --image) IMAGE="$2" ; shift 2 ;;
    --framemask) MASK="$2" ; shift 2 ;;
    --dir-scratch) DIR_SCRATCH="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Usage Help -------------------------------------------------------------------
if [[ "${HELP}" == "true" ]]; then
  echo ''
  echo '------------------------------------------------------------------------'
  echo "TKNI: ${FCN_NAME}"
  echo '------------------------------------------------------------------------'
  echo 'Effective Focus Criterion (EFC):'
  echo 'The EFC uses the Shannon entropy of voxel intensities as an indication'
  echo 'of ghosting and blurring induced by head motion. Lower values are'
  echo 'better. The original equation is normalized by the maximum entropy, so'
  echo 'that the EFC can be compared across images with different dimensions.'
  echo '    Atkinson D, Hill DL, Stoyle PN, Summers PE, Keevil SF. Automatic'
  echo '      correction of motion artifacts in magnetic resonance images using'
  echo '      an entropy focus criterion. IEEE Trans Med Imaging. 1997'
  echo '      Dec;16(6):903â€“10. http://dx.doi.org/10.1109/42.650886'
  echo ''
  echo '  -h | --help              display command help'
  echo '  -l | --no-log            disable writing to output log'
  echo '  --image    <required>    NIfTI image to calculate stats for'
  echo '  --framemask              binary mask indicating region for'
  echo '                           calculation. This is a mask that includes'
  echo '                           only voxels with collected data so needs to'
  echo '                           account for rotation of data'
  echo '  --dir-scratch            location for temporary files'
  echo ''
  NO_LOG=true
  exit 0
fi

#===============================================================================
# Start of Function
#===============================================================================
mkdir -p ${DIR_SCRATCH}

if [[ -z ${MASK} ]]; then
  niimath ${IMAGE} -add 1 -bin ${DIR_SCRATCH}/FRAME.nii.gz
  MASK=${DIR_SCRATCH}/FRAME.nii.gz
fi

niimath ${IMAGE} -mas ${MASK} -mul ${IMAGE} ${DIR_SCRATCH}/BMAX.nii.gz
BMAX=($(3dROIstats -mask ${MASK} -nzsum ${DIR_SCRATCH}/BMAX.nii.gz))
BMAX=$(echo "scale=4; sqrt(${BMAX[-1]})" | bc -l)
niimath ${IMAGE} -div ${BMAX} ${DIR_SCRATCH}/BRATIO.nii.gz
niimath ${DIR_SCRATCH}/BRATIO.nii.gz -log ${DIR_SCRATCH}/LN_BRATIO.nii.gz
niimath ${DIR_SCRATCH}/BRATIO.nii.gz -mul ${DIR_SCRATCH}/LN_BRATIO.nii.gz ${DIR_SCRATCH}/EFC.nii.gz
EFC=($(3dROIstats -mask ${MASK} -nzsum ${DIR_SCRATCH}/EFC.nii.gz))
EFC=${EFC[-1]}
NTMP=($(3dROIstats -mask ${MASK} -nzsum ${MASK}))
N=${NTMP[-1]}
SCALE=$(echo "scale=4; ((${N} / sqrt(${N})) * (l(1 / sqrt(${N}))))" | bc -l)
EFC_SCALED=$(echo "scale=4; ${EFC} / ${SCALE}" | bc -l)
echo ${EFC_SCALED}

#===============================================================================
# End of Function
#===============================================================================
exit 0

