#!/bin/bash -e
#===============================================================================
# DICOM Conversion
# Author: Timothy R. Koscik, PhD
# Date Created: 2023-08-10
# Date Modified: 2023-08-24
# CHANGE_LOG:	-convert into a function
#===============================================================================
PROC_START=$(date +%Y-%m-%dT%H:%M:%S%z)
FCN_NAME=($(basename "$0"))
FCN_NAME=${FCN_NAME%.*}
DATE_SUFFIX=$(date +%Y%m%dT%H%M%S)
OPERATOR=$(whoami)
OPERATOR=${OPERATOR//@}
KERNEL="$(uname -s)"
HARDWARE="$(uname -m)"
NO_LOG=false
umask 007

# actions on exit, write to logs, clean scratch --------------------------------
function egress {
  EXIT_CODE=$?
  PROC_STOP=$(date +%Y-%m-%dT%H:%M:%S%z)
  if [[ ${EXIT_CODE} -eq 0 ]]; then
    if [[ -n ${DIR_SCRATCH} ]]; then
      if [[ -d ${DIR_SCRATCH} ]]; then
        if [[ "$(ls -A ${DIR_SCRATCH})" ]]; then
          rm -R ${DIR_SCRATCH}
        else
          rmdir ${DIR_SCRATCH}
        fi
      fi
    fi
  fi
  if [[ "${NO_LOG}" == "false" ]]; then
    writeBenchmark ${OPERATOR} ${HARDWARE} ${KERNEL} ${FCN_NAME} \
      ${PROC_START} ${PROC_STOP} ${EXIT_CODE}
  fi
}
trap egress EXIT

# Set default values ----------------------------------------------------------
PI=
PROJECT=
PIPELINE=tkni
DIR_PROJECT=
DIR_SCRATCH=
IDPFX=
IDDIR=
INPUT_DCM=
HELP=false
VERBOSE=false
NO_PNG=false

while true; do
  case "$1" in
    -h | --help) HELP=true ; shift ;;
    -v | --verbose) VERBOSE=true ; shift ;;
    -n | --no-png) NO_PNG=true ; shift ;;
    --pi) PI="$2" ; shift 2 ;;
    --project) PROJECT="$2" ; shift 2 ;;
    --pipeline) PIPELINE="$2" ; shift 2 ;;
    --id) IDPFX="$2" ; shift 2 ;;
    --dir-id) IDDIR="$2" ; shift 2 ;;
    --input-dcm) INPUT_DCM="$2" ; shift 2 ;;
    --dir-project) DIR_PROJECT="$2" ; shift 2 ;;
    --dir-scratch) DIR_SCRATCH="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Usage Help -------------------------------------------------------------------
if [[ "${HELP}" == "true" ]]; then
  echo ''
  echo '------------------------------------------------------------------------'
  echo "TKNI: ${FCN_NAME}"
  echo '------------------------------------------------------------------------'
  echo '  -h | --help        display command help'
  echo '  -v | --verbose     add verbose output to log file'
  echo '  -n | --no-png      disable generating pngs of output'
  echo '  --pi               folder name for PI, no underscores'
  echo '                       default=evanderplas'
  echo '  --project          project name, preferrable camel case'
  echo '                       default=unitcall'
  echo '  --pid              participant identifier'
  echo '  --sid              session identifier'
  echo '  --aid              assessment identifier'
  echo '  --input-dcm        full path to DICOMs, may be directory or zip-file'
  echo '  --dir-project      project directory'
  echo '                     default=/data/x/projects/${PI}/${PROJECT}'
  echo '  --dir-scratch      directory for temporary workspace'
  echo ''
  NO_LOG=true
  exit 0
fi

#===============================================================================
# Start of Function
#===============================================================================
# set project defaults ---------------------------------------------------------
if [[ -z ${PI} ]]; then
  echo "ERROR [TKNI:${FCN_NAME}] PI must be provided"
  exit 1
fi
if [[ -z ${PROJECT} ]]; then
  echo "ERROR [TKNI:${FCN_NAME}] PROJECT must be provided"
  exit 1
fi
if [[ -z ${DIR_PROJECT} ]]; then
  DIR_PROJECT=/data/x/projects/${PI}/${PROJECT}
fi
if [[ -z ${DIR_SCRATCH} ]]; then
  DIR_SCRATCH=${TKNI_SCRATCH}/${FCN_NAME}_${PI}_${PROJECT}_${DATE_SUFFIX}
fi
mkdir -p ${DIR_SCRATCH}


# Check ID ---------------------------------------------------------------------
if [[ -z ${IDPFX} ]]; then
  echo "ERROR [TKNI:${FCN_NAME}] ID Prefix must be provided"
  exit 1
fi
if [[ -z ${IDDIR} ]]; then
  TSUB=$(getField -i ${IDPFX} -f sub)
  TSES=$(getField -i ${IDPFX} -f ses)
  IDDIR=sub-${TSUB}
  if [[ -n ${TSES} ]]; then
    IDDIR="${IDDIR}/ses-${TSES}"
  fi
fi
if [[ ${VERBOSE} == "true" ]]; then
  echo -e "\tID:\t${IDPFX}"
  echo -e "\tDIR_SUBJECT:\t${IDDIR}"
fi

if [[ -z ${INPUT_DCM} ]]; then
  INPUT_DCM=${DIR_PROJECT}/sourcedata/${IDPFX}_dicom.zip
  if [[ ! -f ${INPUT_DCM} ]]; then
    echo "ERROR [TKNI:${FCN_NAME}] Expected input DICOM not found, please specify"
    echo "   Could not find: ${INPUT_DCM}"
    exit 1
  fi
fi

DIR_RAW=${DIR_PROJECT}/rawdata/${IDDIR}

## Identify all files to output ================================================
# check for images if the don't exist make them
# Raw Acquisitions -------------------------------------------------------------
IMG_RAW=($(find ${DIR_RAW} -name "${IDPFX}*.nii.gz"))

for (( i=0; i<${#IMG_RAW[@]}; i++ )); do
  BG=${IMG_RAW[${i}]}
  TPNG="${BG%%.*}.png"
  DAT=$(niiInfo -i ${BG} -f datatype)
  if [[ ${DAT} -ne 128 ]]; then
  if [[ ! -f ${TPNG} ]]; then
    NVOL=$(niiInfo -i ${BG} -f "volumes")
    if [[ ${NVOL} -eq 1 ]]; then
      make3Dpng --bg ${BG} --bg-threshold "2.5,97.5"
    elif [[ ${NVOL} -le 5 ]]; then
      montage_fcn="montage"
      for (( j=1; j<=${NVOL}; j++ )); do
        make3Dpng --bg ${BG} --bg-vol ${j} --bg-threshold "2.5,97.5" \
          --filename vol${j} --dir-save ${DIR_SCRATCH}
        montage_fcn="${montage_fcn} ${DIR_SCRATCH}/vol${j}.png"
      done
      montage_fcn="${montage_fcn} -tile 1x -geometry +0+0 -gravity center"
      montage_fcn=${montage_fcn}' -background "#FFFFFF"'
      montage_fcn="${montage_fcn} ${TPNG}"
      eval ${montage_fcn}
      rm ${DIR_SCRATCH}/vol*.png
    else
      make3Dpng --bg ${BG} --bg-threshold "2.5,97.5"
    fi
  fi
  fi
done

# Initialize summary output Rmd ------------------------------------------------
if [[ ${VERBOSE} == "true" ]]; then echo ">>>>>Generate RMD/HTML Report"; fi

mkdir -p ${DIR_PROJECT}/qc
RMD=${DIR_PROJECT}/qc/${IDPFX}_${FCN_NAME}_${DATE_SUFFIX}.Rmd

echo '---' > ${RMD}
echo 'title: "&nbsp;"' >> ${RMD}
echo 'output: html_document' >> ${RMD}
echo -e '---\n' >> ${RMD}
echo '' >> ${RMD}
echo '```{r setup, include=FALSE}' >> ${RMD}
echo 'knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE, comment=NA)' >> ${RMD}
echo '```' >> ${RMD}
echo '' >> ${RMD}
echo '```{r, out.width = "400px", fig.align="right"}' >> ${RMD}
echo 'knitr::include_graphics("/usr/local/tkbrainlab/neuroimage_code/TK_BRAINLab_logo.png")' >> ${RMD}
echo '```' >> ${RMD}
echo '' >> ${RMD}

echo '## DICOM Conversion' >> ${RMD}

# output Project related information -------------------------------------------
echo '---'
echo '' >> ${RMD}
echo '```{r, echo=FALSE}' >> ${RMD}
echo 'library(DT)' >> ${RMD}
echo "create_dt <- function(x){" >> ${RMD}
echo "  DT::datatable(x," >> ${RMD}
echo "    extensions = 'Buttons'," >> ${RMD}
echo "    options = list(dom = 'Blfrtip'," >> ${RMD}
echo "    buttons = c('copy', 'csv', 'excel', 'pdf', 'print')," >> ${RMD}
echo "    lengthMenu = list(c(10,25,50,-1)," >> ${RMD}
echo '      c(10,25,50,"All"))))' >> ${RMD}
echo "}" >> ${RMD}
echo '```' >> ${RMD}
echo '' >> ${RMD}
echo '---' >> ${RMD}
echo '' >> ${RMD}

# output Raw data --------------------------------------------------------------
echo 'PI: **'${PI}'**\' >> ${RMD}
echo 'PROJECT: **'${PROJECT}'**\' >> ${RMD}
echo 'IDENTIFIER: **'${IDPFX}'**\' >> ${RMD}
echo 'DATE: **`r Sys.time()`**\' >> ${RMD}
echo 'DICOM Source: **'${INPUT_DCM}'**\' >> ${RMD}
echo '' >> ${RMD}
echo '### NIfTI Output {.tabset}' >> ${RMD}
echo '#### Click to View ->' >> ${RMD}
echo '#### File Tree' >> ${RMD}
echo '```{bash}' >> ${RMD}
echo 'tree -P "'${IDPFX}'*" -Rn --prune '${DIR_RAW} >> ${RMD}
echo '```' >> ${RMD}
echo '' >> ${RMD}

echo '### Raw Data {.tabset}' >> ${RMD}
MOD_RAW=("anat" "dwi" "func" "fmap")
for (( j=0; j<${#MOD_RAW[@]}; j++ )); do
  TDIR=${DIR_RAW}/${MOD_RAW[${j}]}
  if [[ -d ${TDIR} ]]; then
    echo '#### '${MOD_RAW[${j}]}' {.tabset}' >> ${RMD}
    TLS=($(ls ${TDIR}/${IDPFX}*.nii.gz))
    for (( i=0; i<${#TLS[@]}; i++ )); do
      BNAME=$(basename ${TLS[${i}]})
      FNAME=${BNAME//\.nii\.gz}
      TMOD=${FNAME//${IDPFX}_}
      TPNG=${TDIR}/${FNAME}.png
      echo '##### '${TMOD} >> ${RMD}
      if [[ -f ${TPNG} ]]; then
        echo '!['${BNAME}']('${TPNG}')' >> ${RMD}
      else
        echo 'PNG Not Found\' >> ${RMD}
      fi
      echo '' >> ${RMD}
    done
  else
    echo '###### '${MOD_RAW[${j}]} >> ${RMD}
    echo 'NIfTI Not Found\' >> ${RMD}
    echo '' >> ${RMD}
  fi
done

# Render RMD file as html ------------------------------------------------------
Rscript -e "rmarkdown::render('${RMD}')"
rm ${RMD}

#===============================================================================
# End of function
#===============================================================================
exit 0
