#!/bin/bash -e
#===============================================================================
# Generate summary values for ROI maps generated by BRAINSAutoworkup
# Authors: Timothy R. Koscik, PhD
# Date: 2020-04-15
#===============================================================================
PROC_START=$(date +%Y-%m-%dT%H:%M:%S%z)
FCN_NAME=($(basename "$0"))
DATE_SUFFIX=$(date +%Y%m%dT%H%M%S%N)
OPERATOR=$(whoami)
KERNEL="$(uname -s)"
HARDWARE="$(uname -m)"
KEEP=false
NO_LOG=false
umask 007

# actions on exit, write to logs, clean scratch
function egress {
  EXIT_CODE=$?
  PROC_STOP=$(date +%Y-%m-%dT%H:%M:%S%z)
  if [[ "${KEEP}" == "false" ]]; then
    if [[ -n ${DIR_SCRATCH} ]]; then
      if [[ -d ${DIR_SCRATCH} ]]; then
        if [[ "$(ls -A ${DIR_SCRATCH})" ]]; then
          rm -R ${DIR_SCRATCH}
        else
          rmdir ${DIR_SCRATCH}
        fi
      fi
    fi
  fi
  if [[ "${NO_LOG}" == "false" ]]; then
    writeBenchmark ${OPERATOR} ${HARDWARE} ${KERNEL} ${FCN_NAME} \
      ${PROC_START} ${PROC_STOP} ${EXIT_CODE}
  fi
}
trap egress EXIT

# Parse inputs -----------------------------------------------------------------
OPTS=$(getopt -o hvla --long prefix:,suffix:,\
label:,value:,stats:,lut:,append:,append-to:,\
dir-save:,dir-scratch:,\
help,verbose,no-log -n 'parse-options' -- "$@")
if [[ $? != 0 ]]; then
  echo "Failed parsing options" >&2
  exit 1
fi
eval set -- "$OPTS"

# Set default values for function ---------------------------------------------
PREFIX=
SUFFIX=
LABEL=
VALUE=
STATS="volume"
LUT=
DIR_SAVE=
APPEND="both"
APPEND_TO=
DIR_SCRATCH=${TKNI_SCRATCH}/${FCN_NAME}_${OPERATOR}_${DATE_SUFFIX}
HELP=false
VERBOSE=0

while true; do
  case "$1" in
    -h | --help) HELP=true ; shift ;;
    -v | --verbose) VERBOSE=1 ; shift ;;
    -l | --no-log) NO_LOG=true ; shift ;;
    -a | --no-append) NO_APPEND=true ; shift ;;
    --label) LABEL="$2" ; shift 2 ;;
    --value) VALUE="$2" ; shift 2 ;;
    --stats) STATS="$2" ; shift 2 ;;
    --lut) LUT="$2" ; shift 2 ;;
    --append) APPEND="$2" ; shift 2 ;;
    --append-to) APPEND_TO="$2" ; shift 2 ;;
    --prefix) PREFIX="$2" ; shift 2 ;;
    --suffix) SUFFIX="$2" ; shift 2 ;;
    --dir-save) DIR_SAVE="$2" ; shift 2 ;;
    --dir-scratch) DIR_SCRATCH="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Usage Help -------------------------------------------------------------------
if [[ "${HELP}" == "true" ]]; then
  echo ''
  echo '------------------------------------------------------------------------'
  echo "TKNI: ${FCN_NAME}"
  echo '------------------------------------------------------------------------'
  echo '  -h | --help              display command help'
  echo '  -v | --verbose           add verbose output to log file'
  echo '  -l | --no-log            disable writing to output log'
  echo '  --label <value>          full file path to  label file'
  echo '  --value <value>          file path to NIfTI file containing the values'
  echo '                           to summarize, omit if only volumes are desired.'
  echo '  --stats <value>          which stats to report, options are:'
  echo '                           mean, nzmean, sigma, nzsigma, median, nzmedian'
  echo '                           mode, nzmode, min, nzmin, max, nzmax, volume'
  echo '  --lut <value>            full path to look up table for labels'
  echo '  --prefix <value>         scan prefix, default: sub-123_ses-1234abcd'
  echo '  --dir-save <value>       directory to save output, default varies by function'
  echo '  --dir-scratch <value>    directory for temporary workspace'
  echo ''
  NO_LOG=true
  exit 0
fi

#===============================================================================
# Start of Function
#===============================================================================
if [[ -z "${VALUE}" ]]; then
  TRG_FILE=${LABEL}
else
  TRG_FILE=${VALUE}
fi

# Set up BIDs compliant variables and workspace --------------------------------
#DIR_PROJECT=$(getDir -i ${TRG_FILE})
#PROJECT=$(getProject -i ${TRG_FILE})
#PID=$(getField -i ${TRG_FILE} -f "sub")
#SID=$(getField -i ${TRG_FILE} -f "ses")
if [ -z "${PREFIX}" ]; then
  #PREFIX="sub-${PID}"
  #if [[ -n ${SID} ]]; then
  #  PREFIX="${PREFIX}_ses-${SID}"
  #fi
  PREFIX=$(basename ${LABEL})
  PREFIX=${PREFIX//\.nii\.gz}
fi
mkdir -p ${DIR_SCRATCH}

if [[ -z "${LUT}" ]]; then
  echo "ERROR [TKNI:${FCN_NAME}] properly formatted LUT must be provided."
fi

STATS_LS=${STATS}
STATS=(${STATS//,/ })

# Generate stats using 3dROIstats in AFNI... it can't be beat for speed.
afni_fcn="3dROIstats -mask ${LABEL}"
for (( i=0; i<${#STATS[@]}; i++ )); do
  if [[ "${STATS[${i}],,}" == "nzmean" ]]; then afni_fcn="${afni_fcn} -nzmean"; fi
  if [[ "${STATS[${i}],,}" == "sigma" ]]; then afni_fcn="${afni_fcn} -sigma"; fi
  if [[ "${STATS[${i}],,}" == "nzsigma" ]]; then afni_fcn="${afni_fcn} -nzsigma"; fi
  if [[ "${STATS[${i}],,}" == "median" ]]; then afni_fcn="${afni_fcn} -median"; fi
  if [[ "${STATS[${i}],,}" == "nzmedian" ]]; then afni_fcn="${afni_fcn} -nzmedian"; fi
  if [[ "${STATS[${i}],,}" == "mode" ]]; then afni_fcn="${afni_fcn} -mode"; fi
  if [[ "${STATS[${i}],,}" == "nzmode" ]]; then afni_fcn="${afni_fcn} -nzmode"; fi
  if [[ "${STATS[${i}],,}" == "min" ]] | [[ "${STATS[${i}],,}" == "max" ]]; then afni_fcn="${afni_fcn} -minmax"; fi
  if [[ "${STATS[${i}],,}" == "nzmin" ]] | [[ "${STATS[${i}],,}" == "nzmax" ]]; then afni_fcn="${afni_fcn} -nzminmax"; fi
done
afni_fcn="${afni_fcn} -nzvoxels"
afni_fcn="${afni_fcn} ${TRG_FILE}"
afni_fcn="${afni_fcn} > ${DIR_SCRATCH}/${PREFIX}_tempSummary.tsv"
eval ${afni_fcn}

# Get voxel dimensions ---------------------------------------------------------
IFS=x read -r -a pixdimTemp <<< $(PrintHeader ${LABEL} 1)
PIXDIM="${pixdimTemp[0]}x${pixdimTemp[1]}x${pixdimTemp[2]}"

# Summarize stats according to look up table -----------------------------------
Rscript ${TKNIPATH}/R/summarize3D.R \
  ${PREFIX} \
  ${DIR_SCRATCH}/${PREFIX}_tempSummary.tsv \
  ${STATS_LS} \
  ${PIXDIM} \
  ${LUT}

# Setup save directories -------------------------------------------------------
OUTPUT=${DIR_SCRATCH}/${PREFIX}_tempSummary_processed.tsv

if [[ -z "${VALUE}" ]]; then
  MOD=volume
else
  MOD=$(getField -i ${VALUE} -f "modality")
fi
if [[ -z ${SUFFIX} ]]; then SUFFIX=${MOD}; fi

LABEL_NAME=($(getField -i ${LABEL} -f "label"))

## set header row
HEADER=$(head -n 1 ${LUT})
HEADER=(${HEADER///})
HEADER=("${HEADER[@]:1}")
HDR_STR=$(echo ${HEADER[@]})
HDR_STR=${HDR_STR// /\\t}
HDR_STR="participant_id\tsummary_date\tmeasure\t${HDR_STR[@]}"

if [[ "${APPEND}" == "true" ]] || [[ "${APPEND}" == "both" ]]; then
  if [[ -z ${APPEND_TO} ]]; then
    TDIR=$(getDir -i $(realpath ${LABEL}))
    TPRO=$(getProject -i $(realpath ${LABEL}))
    APPEND_TO="${TDIR}/summary/${TPRO}_${SUFFIX}_label-${LABEL_NAME}.tsv"
  fi
  mkdir -p $(dirname ${APPEND_TO})
  if [[ ! -f ${APPEND_TO} ]]; then echo -e "${HDR_STR[@]}" >> ${APPEND_TO}; fi
  cat -e ${OUTPUT} >> ${APPEND_TO}
fi

if [[ "${APPEND}" == "false" ]] || [[ "${APPEND}" == "both" ]]; then
  if [[ -z "${DIR_SAVE}" ]]; then
    if [[ -n ${VALUE} ]]; then
      DIR_SAVE=$(dirname ${VALUE})
    else
      DIR_SAVE=$(dirname ${LABEL})
    fi
  fi
  mkdir -p ${DIR_SAVE}
  TFILE=${DIR_SAVE}/${PREFIX}_${SUFFIX}.tsv
  if [[ ! -f ${TFILE} ]]; then echo -e "${HDR_STR[@]}" >> ${TFILE}; fi
  cat ${OUTPUT} >> ${TFILE}
fi

#===============================================================================
# End of Function
#===============================================================================
exit 0

